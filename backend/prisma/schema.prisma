// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  profilePicture String?
  email          String     @unique
  password       String?
  role           Role       @default(USER)
  firstname      String
  lastname       String
  skills         Skill[]
  jobTitle       String
  team           Teams?     @relation(fields: [teamId], references: [id])
  teamId         String?
  Event          Event[]
  Training       Training[]
  UserQuiz       UserQuiz?  @relation(fields: [userQuizId], references: [id])
  userQuizId     String?    @unique
  quizCompleted  Boolean?   @default(false)
  Answer         Answer[]
}

model Skill {
  id     String    @id @default(uuid())
  name   String
  level  Int
  user   User      @relation(fields: [userId], references: [id])
  userId String
  type   SkillType
}

model Teams {
  id        String   @id @default(uuid())
  teamName  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  participants User[]
}

model Training {
  id          String   @id @default(uuid())
  title       String
  description String
  skills      String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model UserQuiz {
  id        String   @id @default(uuid())
  user      User?
  userId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        String     @id @default(uuid())
  title     String
  questions Question[]
  UserQuiz  UserQuiz[]
}

model Answer {
  id         String    @id @default(uuid())
  answer     String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Question {
  id     String   @id @default(uuid())
  text   String
  answer Answer[]
  quiz   Quiz     @relation(fields: [quizId], references: [id])
  quizId String
}

enum Role {
  ADMIN
  USER
}

enum SkillType {
  BACK
  FRONT
  INFRA
}
